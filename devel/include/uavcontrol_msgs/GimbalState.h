// Generated by gencpp from file uavcontrol_msgs/GimbalState.msg
// DO NOT EDIT!


#ifndef UAVCONTROL_MSGS_MESSAGE_GIMBALSTATE_H
#define UAVCONTROL_MSGS_MESSAGE_GIMBALSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace uavcontrol_msgs
{
template <class ContainerAllocator>
struct GimbalState_
{
  typedef GimbalState_<ContainerAllocator> Type;

  GimbalState_()
    : header()
    , type(0)
    , moveMode(0)
    , imageMode(0)
    , isZoom(false)
    , isRec(0)
    , fov()
    , angleRT()
    , angleRTRate()
    , angleRateSet()  {
      fov.assign(0.0);

      angleRT.assign(0.0);

      angleRTRate.assign(0.0);

      angleRateSet.assign(0.0);
  }
  GimbalState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(0)
    , moveMode(0)
    , imageMode(0)
    , isZoom(false)
    , isRec(0)
    , fov()
    , angleRT()
    , angleRTRate()
    , angleRateSet()  {
  (void)_alloc;
      fov.assign(0.0);

      angleRT.assign(0.0);

      angleRTRate.assign(0.0);

      angleRateSet.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _moveMode_type;
  _moveMode_type moveMode;

   typedef uint8_t _imageMode_type;
  _imageMode_type imageMode;

   typedef uint8_t _isZoom_type;
  _isZoom_type isZoom;

   typedef uint8_t _isRec_type;
  _isRec_type isRec;

   typedef boost::array<float, 2>  _fov_type;
  _fov_type fov;

   typedef boost::array<float, 3>  _angleRT_type;
  _angleRT_type angleRT;

   typedef boost::array<float, 3>  _angleRTRate_type;
  _angleRTRate_type angleRTRate;

   typedef boost::array<float, 3>  _angleRateSet_type;
  _angleRateSet_type angleRateSet;





  typedef boost::shared_ptr< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalState_

typedef ::uavcontrol_msgs::GimbalState_<std::allocator<void> > GimbalState;

typedef boost::shared_ptr< ::uavcontrol_msgs::GimbalState > GimbalStatePtr;
typedef boost::shared_ptr< ::uavcontrol_msgs::GimbalState const> GimbalStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uavcontrol_msgs::GimbalState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uavcontrol_msgs::GimbalState_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::GimbalState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.moveMode == rhs.moveMode &&
    lhs.imageMode == rhs.imageMode &&
    lhs.isZoom == rhs.isZoom &&
    lhs.isRec == rhs.isRec &&
    lhs.fov == rhs.fov &&
    lhs.angleRT == rhs.angleRT &&
    lhs.angleRTRate == rhs.angleRTRate &&
    lhs.angleRateSet == rhs.angleRateSet;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uavcontrol_msgs::GimbalState_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::GimbalState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uavcontrol_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17d9d9f817a22490d422f0f90e0623a4";
  }

  static const char* value(const ::uavcontrol_msgs::GimbalState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17d9d9f817a22490ULL;
  static const uint64_t static_value2 = 0xd422f0f90e0623a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uavcontrol_msgs/GimbalState";
  }

  static const char* value(const ::uavcontrol_msgs::GimbalState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# gimbal type; value = {SV::GimbalType};0:G1;1:Q10F;2:AT10;3:GX40;4:SU17\n"
"uint8 type\n"
"# gimbal movement mode; 0:None; 1:lock head; 2ï¼šunlock head; 3: tracking;\n"
"uint8 moveMode\n"
"# gimbal image type; 0:normal; 1:infrared; 2:merge;\n"
"uint8 imageMode\n"
"# gimbal zoom\n"
"bool isZoom\n"
"# gimbal rec; 0:none; 1:gimbal rec; 2:local rec; 3:gimbal & local rec;\n"
"uint8 isRec\n"
"# gimbal fov, XY\n"
"float32[2] fov\n"
"# gimbal real time angle, RPY <deg>\n"
"float32[3] angleRT\n"
"# gimbal real time angle rate, RPY <deg/s> <if gimbal supported>\n"
"float32[3] angleRTRate\n"
"# gimbal setted max angle rate <deg/s> <if gimbal supported>\n"
"float32[3] angleRateSet\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::uavcontrol_msgs::GimbalState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.moveMode);
      stream.next(m.imageMode);
      stream.next(m.isZoom);
      stream.next(m.isRec);
      stream.next(m.fov);
      stream.next(m.angleRT);
      stream.next(m.angleRTRate);
      stream.next(m.angleRateSet);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uavcontrol_msgs::GimbalState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uavcontrol_msgs::GimbalState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "moveMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moveMode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "imageMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imageMode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "isZoom: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isZoom);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "isRec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isRec);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "fov: ";
    if (v.fov.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.fov.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.fov[i]);
    }
    if (v.fov.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "angleRT: ";
    if (v.angleRT.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.angleRT.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.angleRT[i]);
    }
    if (v.angleRT.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "angleRTRate: ";
    if (v.angleRTRate.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.angleRTRate.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.angleRTRate[i]);
    }
    if (v.angleRTRate.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "angleRateSet: ";
    if (v.angleRateSet.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.angleRateSet.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.angleRateSet[i]);
    }
    if (v.angleRateSet.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAVCONTROL_MSGS_MESSAGE_GIMBALSTATE_H
