// Generated by gencpp from file uavcontrol_msgs/BasicDataTypeAndValue.msg
// DO NOT EDIT!


#ifndef UAVCONTROL_MSGS_MESSAGE_BASICDATATYPEANDVALUE_H
#define UAVCONTROL_MSGS_MESSAGE_BASICDATATYPEANDVALUE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uavcontrol_msgs
{
template <class ContainerAllocator>
struct BasicDataTypeAndValue_
{
  typedef BasicDataTypeAndValue_<ContainerAllocator> Type;

  BasicDataTypeAndValue_()
    : name()
    , type(0)
    , integer_value(0)
    , boolean_value(false)
    , float_value(0.0)
    , double_value(0.0)
    , string_value()  {
    }
  BasicDataTypeAndValue_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(0)
    , integer_value(0)
    , boolean_value(false)
    , float_value(0.0)
    , double_value(0.0)
    , string_value(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _type_type;
  _type_type type;

   typedef int32_t _integer_value_type;
  _integer_value_type integer_value;

   typedef uint8_t _boolean_value_type;
  _boolean_value_type boolean_value;

   typedef float _float_value_type;
  _float_value_type float_value;

   typedef double _double_value_type;
  _double_value_type double_value;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _string_value_type;
  _string_value_type string_value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INTEGER)
  #undef INTEGER
#endif
#if defined(_WIN32) && defined(BOOLEAN)
  #undef BOOLEAN
#endif
#if defined(_WIN32) && defined(FLOAT)
  #undef FLOAT
#endif
#if defined(_WIN32) && defined(DOUBLE)
  #undef DOUBLE
#endif
#if defined(_WIN32) && defined(STRING)
  #undef STRING
#endif

  enum {
    INTEGER = 1u,
    BOOLEAN = 2u,
    FLOAT = 3u,
    DOUBLE = 4u,
    STRING = 5u,
  };


  typedef boost::shared_ptr< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> const> ConstPtr;

}; // struct BasicDataTypeAndValue_

typedef ::uavcontrol_msgs::BasicDataTypeAndValue_<std::allocator<void> > BasicDataTypeAndValue;

typedef boost::shared_ptr< ::uavcontrol_msgs::BasicDataTypeAndValue > BasicDataTypeAndValuePtr;
typedef boost::shared_ptr< ::uavcontrol_msgs::BasicDataTypeAndValue const> BasicDataTypeAndValueConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.type == rhs.type &&
    lhs.integer_value == rhs.integer_value &&
    lhs.boolean_value == rhs.boolean_value &&
    lhs.float_value == rhs.float_value &&
    lhs.double_value == rhs.double_value &&
    lhs.string_value == rhs.string_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uavcontrol_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43928e1d51d365ceca1cc00365d754f1";
  }

  static const char* value(const ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43928e1d51d365ceULL;
  static const uint64_t static_value2 = 0xca1cc00365d754f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uavcontrol_msgs/BasicDataTypeAndValue";
  }

  static const char* value(const ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"\n"
"uint8 type\n"
"uint8 INTEGER=1\n"
"uint8 BOOLEAN=2\n"
"uint8 FLOAT=3\n"
"uint8 DOUBLE=4\n"
"uint8 STRING=5\n"
"\n"
"int32 integer_value\n"
"bool boolean_value\n"
"float32 float_value\n"
"float64 double_value\n"
"string string_value\n"
;
  }

  static const char* value(const ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.integer_value);
      stream.next(m.boolean_value);
      stream.next(m.float_value);
      stream.next(m.double_value);
      stream.next(m.string_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BasicDataTypeAndValue_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "integer_value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.integer_value);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "boolean_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.boolean_value);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "float_value: ";
    Printer<float>::stream(s, indent + "  ", v.float_value);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "double_value: ";
    Printer<double>::stream(s, indent + "  ", v.double_value);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "string_value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.string_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAVCONTROL_MSGS_MESSAGE_BASICDATATYPEANDVALUE_H
