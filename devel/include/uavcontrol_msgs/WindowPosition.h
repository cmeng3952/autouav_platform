// Generated by gencpp from file uavcontrol_msgs/WindowPosition.msg
// DO NOT EDIT!


#ifndef UAVCONTROL_MSGS_MESSAGE_WINDOWPOSITION_H
#define UAVCONTROL_MSGS_MESSAGE_WINDOWPOSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace uavcontrol_msgs
{
template <class ContainerAllocator>
struct WindowPosition_
{
  typedef WindowPosition_<ContainerAllocator> Type;

  WindowPosition_()
    : header()
    , mode(0)
    , origin_x(0)
    , origin_y(0)
    , width(0)
    , height(0)
    , window_position_x(0)
    , window_position_y(0)
    , track_id(0)  {
    }
  WindowPosition_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , origin_x(0)
    , origin_y(0)
    , width(0)
    , height(0)
    , window_position_x(0)
    , window_position_y(0)
    , track_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef int16_t _origin_x_type;
  _origin_x_type origin_x;

   typedef int16_t _origin_y_type;
  _origin_y_type origin_y;

   typedef int16_t _width_type;
  _width_type width;

   typedef int16_t _height_type;
  _height_type height;

   typedef int16_t _window_position_x_type;
  _window_position_x_type window_position_x;

   typedef int16_t _window_position_y_type;
  _window_position_y_type window_position_y;

   typedef int32_t _track_id_type;
  _track_id_type track_id;





  typedef boost::shared_ptr< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> const> ConstPtr;

}; // struct WindowPosition_

typedef ::uavcontrol_msgs::WindowPosition_<std::allocator<void> > WindowPosition;

typedef boost::shared_ptr< ::uavcontrol_msgs::WindowPosition > WindowPositionPtr;
typedef boost::shared_ptr< ::uavcontrol_msgs::WindowPosition const> WindowPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uavcontrol_msgs::WindowPosition_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::WindowPosition_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.origin_x == rhs.origin_x &&
    lhs.origin_y == rhs.origin_y &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.window_position_x == rhs.window_position_x &&
    lhs.window_position_y == rhs.window_position_y &&
    lhs.track_id == rhs.track_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uavcontrol_msgs::WindowPosition_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::WindowPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uavcontrol_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89d76cf2a4942da77237e3ebfe45c4de";
  }

  static const char* value(const ::uavcontrol_msgs::WindowPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89d76cf2a4942da7ULL;
  static const uint64_t static_value2 = 0x7237e3ebfe45c4deULL;
};

template<class ContainerAllocator>
struct DataType< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uavcontrol_msgs/WindowPosition";
  }

  static const char* value(const ::uavcontrol_msgs::WindowPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"#模式：0：空闲  1.kcf   3.deepsort/sort(点击的id) \n"
"uint8 mode\n"
"\n"
"\n"
"#波门位置X,#波门位置Y(kcf,点击画面的功能的时候使用),左上角为（0,0）\n"
"int16 origin_x\n"
"int16 origin_y\n"
"int16 width\n"
"int16 height \n"
"\n"
"#波门位置X,#波门位置Y\n"
"#int16 window_position_x = origin_x + width/2\n"
"#int16 window_position_y = origin_y + height/2\n"
"int16 window_position_x\n"
"int16 window_position_y\n"
"\n"
"#算法检测结果的ID\n"
"int32 track_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::uavcontrol_msgs::WindowPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.origin_x);
      stream.next(m.origin_y);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.window_position_x);
      stream.next(m.window_position_y);
      stream.next(m.track_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WindowPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uavcontrol_msgs::WindowPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uavcontrol_msgs::WindowPosition_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "origin_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.origin_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "origin_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.origin_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "width: ";
    Printer<int16_t>::stream(s, indent + "  ", v.width);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "height: ";
    Printer<int16_t>::stream(s, indent + "  ", v.height);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "window_position_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.window_position_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "window_position_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.window_position_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "track_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.track_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAVCONTROL_MSGS_MESSAGE_WINDOWPOSITION_H
