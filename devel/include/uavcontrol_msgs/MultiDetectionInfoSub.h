// Generated by gencpp from file uavcontrol_msgs/MultiDetectionInfoSub.msg
// DO NOT EDIT!


#ifndef UAVCONTROL_MSGS_MESSAGE_MULTIDETECTIONINFOSUB_H
#define UAVCONTROL_MSGS_MESSAGE_MULTIDETECTIONINFOSUB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <uavcontrol_msgs/DetectionInfoSub.h>

namespace uavcontrol_msgs
{
template <class ContainerAllocator>
struct MultiDetectionInfoSub_
{
  typedef MultiDetectionInfoSub_<ContainerAllocator> Type;

  MultiDetectionInfoSub_()
    : header()
    , mode(0)
    , num_objs(0)
    , detection_infos()  {
    }
  MultiDetectionInfoSub_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , num_objs(0)
    , detection_infos(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef int32_t _num_objs_type;
  _num_objs_type num_objs;

   typedef std::vector< ::uavcontrol_msgs::DetectionInfoSub_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::uavcontrol_msgs::DetectionInfoSub_<ContainerAllocator> >> _detection_infos_type;
  _detection_infos_type detection_infos;





  typedef boost::shared_ptr< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> const> ConstPtr;

}; // struct MultiDetectionInfoSub_

typedef ::uavcontrol_msgs::MultiDetectionInfoSub_<std::allocator<void> > MultiDetectionInfoSub;

typedef boost::shared_ptr< ::uavcontrol_msgs::MultiDetectionInfoSub > MultiDetectionInfoSubPtr;
typedef boost::shared_ptr< ::uavcontrol_msgs::MultiDetectionInfoSub const> MultiDetectionInfoSubConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.num_objs == rhs.num_objs &&
    lhs.detection_infos == rhs.detection_infos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uavcontrol_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b99fe4725befe6b93176dfa0544a074";
  }

  static const char* value(const ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b99fe4725befe6bULL;
  static const uint64_t static_value2 = 0x93176dfa0544a074ULL;
};

template<class ContainerAllocator>
struct DataType< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uavcontrol_msgs/MultiDetectionInfoSub";
  }

  static const char* value(const ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"#模式：0：空闲  2.simaRPN  3.deepsort/sort\n"
"uint8 mode\n"
"\n"
"## 检测到的目标数量\n"
"int32 num_objs\n"
"\n"
"## 每个目标的检测结果\n"
"DetectionInfoSub[] detection_infos\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: uavcontrol_msgs/DetectionInfoSub\n"
"#目标框的位置（主要斜对角两个点）\n"
"float32 left\n"
"float32 top\n"
"float32 bot\n"
"float32 right\n"
"\n"
"\n"
"## TRACK TARGET(目标框ID)\n"
"int32 trackIds\n"
;
  }

  static const char* value(const ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.num_objs);
      stream.next(m.detection_infos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiDetectionInfoSub_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uavcontrol_msgs::MultiDetectionInfoSub_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "num_objs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_objs);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "detection_infos: ";
    if (v.detection_infos.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.detection_infos.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::uavcontrol_msgs::DetectionInfoSub_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.detection_infos[i]);
    }
    if (v.detection_infos.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAVCONTROL_MSGS_MESSAGE_MULTIDETECTIONINFOSUB_H
