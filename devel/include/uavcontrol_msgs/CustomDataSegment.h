// Generated by gencpp from file uavcontrol_msgs/CustomDataSegment.msg
// DO NOT EDIT!


#ifndef UAVCONTROL_MSGS_MESSAGE_CUSTOMDATASEGMENT_H
#define UAVCONTROL_MSGS_MESSAGE_CUSTOMDATASEGMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <uavcontrol_msgs/BasicDataTypeAndValue.h>

namespace uavcontrol_msgs
{
template <class ContainerAllocator>
struct CustomDataSegment_
{
  typedef CustomDataSegment_<ContainerAllocator> Type;

  CustomDataSegment_()
    : datas()  {
    }
  CustomDataSegment_(const ContainerAllocator& _alloc)
    : datas(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> >> _datas_type;
  _datas_type datas;





  typedef boost::shared_ptr< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> const> ConstPtr;

}; // struct CustomDataSegment_

typedef ::uavcontrol_msgs::CustomDataSegment_<std::allocator<void> > CustomDataSegment;

typedef boost::shared_ptr< ::uavcontrol_msgs::CustomDataSegment > CustomDataSegmentPtr;
typedef boost::shared_ptr< ::uavcontrol_msgs::CustomDataSegment const> CustomDataSegmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator2> & rhs)
{
  return lhs.datas == rhs.datas;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uavcontrol_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c5eb9fae1fd643ad2bc94816d320d81";
  }

  static const char* value(const ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c5eb9fae1fd643aULL;
  static const uint64_t static_value2 = 0xd2bc94816d320d81ULL;
};

template<class ContainerAllocator>
struct DataType< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uavcontrol_msgs/CustomDataSegment";
  }

  static const char* value(const ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BasicDataTypeAndValue[] datas\n"
"================================================================================\n"
"MSG: uavcontrol_msgs/BasicDataTypeAndValue\n"
"string name\n"
"\n"
"uint8 type\n"
"uint8 INTEGER=1\n"
"uint8 BOOLEAN=2\n"
"uint8 FLOAT=3\n"
"uint8 DOUBLE=4\n"
"uint8 STRING=5\n"
"\n"
"int32 integer_value\n"
"bool boolean_value\n"
"float32 float_value\n"
"float64 double_value\n"
"string string_value\n"
;
  }

  static const char* value(const ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.datas);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomDataSegment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uavcontrol_msgs::CustomDataSegment_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "datas: ";
    if (v.datas.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.datas.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::uavcontrol_msgs::BasicDataTypeAndValue_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.datas[i]);
    }
    if (v.datas.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAVCONTROL_MSGS_MESSAGE_CUSTOMDATASEGMENT_H
