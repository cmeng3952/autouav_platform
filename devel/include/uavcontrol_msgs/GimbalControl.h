// Generated by gencpp from file uavcontrol_msgs/GimbalControl.msg
// DO NOT EDIT!


#ifndef UAVCONTROL_MSGS_MESSAGE_GIMBALCONTROL_H
#define UAVCONTROL_MSGS_MESSAGE_GIMBALCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace uavcontrol_msgs
{
template <class ContainerAllocator>
struct GimbalControl_
{
  typedef GimbalControl_<ContainerAllocator> Type;

  GimbalControl_()
    : header()
    , mode(0)
    , angle()
    , speed()  {
      angle.assign(0.0);

      speed.assign(0.0);
  }
  GimbalControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , angle()
    , speed()  {
  (void)_alloc;
      angle.assign(0.0);

      speed.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef boost::array<float, 3>  _angle_type;
  _angle_type angle;

   typedef boost::array<float, 3>  _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalControl_

typedef ::uavcontrol_msgs::GimbalControl_<std::allocator<void> > GimbalControl;

typedef boost::shared_ptr< ::uavcontrol_msgs::GimbalControl > GimbalControlPtr;
typedef boost::shared_ptr< ::uavcontrol_msgs::GimbalControl const> GimbalControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uavcontrol_msgs::GimbalControl_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::GimbalControl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.angle == rhs.angle &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uavcontrol_msgs::GimbalControl_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::GimbalControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uavcontrol_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4aeedd102efdc9f13f7618059be5fcb8";
  }

  static const char* value(const ::uavcontrol_msgs::GimbalControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4aeedd102efdc9f1ULL;
  static const uint64_t static_value2 = 0x3f7618059be5fcb8ULL;
};

template<class ContainerAllocator>
struct DataType< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uavcontrol_msgs/GimbalControl";
  }

  static const char* value(const ::uavcontrol_msgs::GimbalControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# gimbal commod mode; 0:None; 1:speed; 2:angle; 3:mixed\n"
"uint8 mode\n"
"# RPY <deg>\n"
"float32[3] angle\n"
"# RPY <deg/s>\n"
"float32[3] speed\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::uavcontrol_msgs::GimbalControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.angle);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uavcontrol_msgs::GimbalControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uavcontrol_msgs::GimbalControl_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "angle: ";
    if (v.angle.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.angle.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.angle[i]);
    }
    if (v.angle.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed: ";
    if (v.speed.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.speed.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.speed[i]);
    }
    if (v.speed.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAVCONTROL_MSGS_MESSAGE_GIMBALCONTROL_H
