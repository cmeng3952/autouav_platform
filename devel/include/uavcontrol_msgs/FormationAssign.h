// Generated by gencpp from file uavcontrol_msgs/FormationAssign.msg
// DO NOT EDIT!


#ifndef UAVCONTROL_MSGS_MESSAGE_FORMATIONASSIGN_H
#define UAVCONTROL_MSGS_MESSAGE_FORMATIONASSIGN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace uavcontrol_msgs
{
template <class ContainerAllocator>
struct FormationAssign_
{
  typedef FormationAssign_<ContainerAllocator> Type;

  FormationAssign_()
    : formation_poses()
    , assigned()  {
    }
  FormationAssign_(const ContainerAllocator& _alloc)
    : formation_poses(_alloc)
    , assigned(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _formation_poses_type;
  _formation_poses_type formation_poses;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _assigned_type;
  _assigned_type assigned;





  typedef boost::shared_ptr< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> const> ConstPtr;

}; // struct FormationAssign_

typedef ::uavcontrol_msgs::FormationAssign_<std::allocator<void> > FormationAssign;

typedef boost::shared_ptr< ::uavcontrol_msgs::FormationAssign > FormationAssignPtr;
typedef boost::shared_ptr< ::uavcontrol_msgs::FormationAssign const> FormationAssignConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uavcontrol_msgs::FormationAssign_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::FormationAssign_<ContainerAllocator2> & rhs)
{
  return lhs.formation_poses == rhs.formation_poses &&
    lhs.assigned == rhs.assigned;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uavcontrol_msgs::FormationAssign_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::FormationAssign_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uavcontrol_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ecb1c52bd44cfc87c006bf62284d4ef";
  }

  static const char* value(const ::uavcontrol_msgs::FormationAssign_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ecb1c52bd44cfc8ULL;
  static const uint64_t static_value2 = 0x7c006bf62284d4efULL;
};

template<class ContainerAllocator>
struct DataType< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uavcontrol_msgs/FormationAssign";
  }

  static const char* value(const ::uavcontrol_msgs::FormationAssign_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#队形位置\n"
"geometry_msgs/Point[] formation_poses\n"
"\n"
"#位置点是否选取\n"
"bool[] assigned\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uavcontrol_msgs::FormationAssign_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.formation_poses);
      stream.next(m.assigned);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FormationAssign_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uavcontrol_msgs::FormationAssign_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uavcontrol_msgs::FormationAssign_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "formation_poses: ";
    if (v.formation_poses.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.formation_poses.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.formation_poses[i]);
    }
    if (v.formation_poses.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "assigned: ";
    if (v.assigned.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.assigned.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.assigned[i]);
    }
    if (v.assigned.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAVCONTROL_MSGS_MESSAGE_FORMATIONASSIGN_H
