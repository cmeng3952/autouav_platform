// Generated by gencpp from file uavcontrol_msgs/Bspline.msg
// DO NOT EDIT!


#ifndef UAVCONTROL_MSGS_MESSAGE_BSPLINE_H
#define UAVCONTROL_MSGS_MESSAGE_BSPLINE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace uavcontrol_msgs
{
template <class ContainerAllocator>
struct Bspline_
{
  typedef Bspline_<ContainerAllocator> Type;

  Bspline_()
    : drone_id(0)
    , order(0)
    , traj_id(0)
    , start_time()
    , knots()
    , pos_pts()
    , yaw_pts()
    , yaw_dt(0.0)  {
    }
  Bspline_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , order(0)
    , traj_id(0)
    , start_time()
    , knots(_alloc)
    , pos_pts(_alloc)
    , yaw_pts(_alloc)
    , yaw_dt(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _drone_id_type;
  _drone_id_type drone_id;

   typedef int32_t _order_type;
  _order_type order;

   typedef int64_t _traj_id_type;
  _traj_id_type traj_id;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _knots_type;
  _knots_type knots;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _pos_pts_type;
  _pos_pts_type pos_pts;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _yaw_pts_type;
  _yaw_pts_type yaw_pts;

   typedef double _yaw_dt_type;
  _yaw_dt_type yaw_dt;





  typedef boost::shared_ptr< ::uavcontrol_msgs::Bspline_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uavcontrol_msgs::Bspline_<ContainerAllocator> const> ConstPtr;

}; // struct Bspline_

typedef ::uavcontrol_msgs::Bspline_<std::allocator<void> > Bspline;

typedef boost::shared_ptr< ::uavcontrol_msgs::Bspline > BsplinePtr;
typedef boost::shared_ptr< ::uavcontrol_msgs::Bspline const> BsplineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uavcontrol_msgs::Bspline_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uavcontrol_msgs::Bspline_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uavcontrol_msgs::Bspline_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::Bspline_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.order == rhs.order &&
    lhs.traj_id == rhs.traj_id &&
    lhs.start_time == rhs.start_time &&
    lhs.knots == rhs.knots &&
    lhs.pos_pts == rhs.pos_pts &&
    lhs.yaw_pts == rhs.yaw_pts &&
    lhs.yaw_dt == rhs.yaw_dt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uavcontrol_msgs::Bspline_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::Bspline_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uavcontrol_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::Bspline_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::Bspline_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::Bspline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::Bspline_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::Bspline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::Bspline_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uavcontrol_msgs::Bspline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f7510f7be6fba2868a5e74dd6e8163b";
  }

  static const char* value(const ::uavcontrol_msgs::Bspline_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f7510f7be6fba28ULL;
  static const uint64_t static_value2 = 0x68a5e74dd6e8163bULL;
};

template<class ContainerAllocator>
struct DataType< ::uavcontrol_msgs::Bspline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uavcontrol_msgs/Bspline";
  }

  static const char* value(const ::uavcontrol_msgs::Bspline_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uavcontrol_msgs::Bspline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 drone_id\n"
"\n"
"int32 order\n"
"int64 traj_id\n"
"time start_time\n"
"\n"
"float64[] knots\n"
"geometry_msgs/Point[] pos_pts\n"
"\n"
"float64[] yaw_pts\n"
"float64 yaw_dt\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::uavcontrol_msgs::Bspline_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uavcontrol_msgs::Bspline_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.order);
      stream.next(m.traj_id);
      stream.next(m.start_time);
      stream.next(m.knots);
      stream.next(m.pos_pts);
      stream.next(m.yaw_pts);
      stream.next(m.yaw_dt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bspline_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uavcontrol_msgs::Bspline_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uavcontrol_msgs::Bspline_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "drone_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drone_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "order: ";
    Printer<int32_t>::stream(s, indent + "  ", v.order);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "traj_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.traj_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "knots: ";
    if (v.knots.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.knots.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.knots[i]);
    }
    if (v.knots.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pos_pts: ";
    if (v.pos_pts.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.pos_pts.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.pos_pts[i]);
    }
    if (v.pos_pts.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaw_pts: ";
    if (v.yaw_pts.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.yaw_pts.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.yaw_pts[i]);
    }
    if (v.yaw_pts.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaw_dt: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_dt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAVCONTROL_MSGS_MESSAGE_BSPLINE_H
