// Generated by gencpp from file uavcontrol_msgs/UAVCommand.msg
// DO NOT EDIT!


#ifndef UAVCONTROL_MSGS_MESSAGE_UAVCOMMAND_H
#define UAVCONTROL_MSGS_MESSAGE_UAVCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace uavcontrol_msgs
{
template <class ContainerAllocator>
struct UAVCommand_
{
  typedef UAVCommand_<ContainerAllocator> Type;

  UAVCommand_()
    : header()
    , Agent_CMD(0)
    , Control_Level(0)
    , Move_mode(0)
    , position_ref()
    , velocity_ref()
    , acceleration_ref()
    , yaw_ref(0.0)
    , rtl_height(0.0)
    , land_speed(0.0)
    , Yaw_Rate_Mode(false)
    , yaw_rate_ref(0.0)
    , att_ref()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , Command_ID(0)  {
      position_ref.assign(0.0);

      velocity_ref.assign(0.0);

      acceleration_ref.assign(0.0);

      att_ref.assign(0.0);
  }
  UAVCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Agent_CMD(0)
    , Control_Level(0)
    , Move_mode(0)
    , position_ref()
    , velocity_ref()
    , acceleration_ref()
    , yaw_ref(0.0)
    , rtl_height(0.0)
    , land_speed(0.0)
    , Yaw_Rate_Mode(false)
    , yaw_rate_ref(0.0)
    , att_ref()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , Command_ID(0)  {
  (void)_alloc;
      position_ref.assign(0.0);

      velocity_ref.assign(0.0);

      acceleration_ref.assign(0.0);

      att_ref.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _Agent_CMD_type;
  _Agent_CMD_type Agent_CMD;

   typedef uint8_t _Control_Level_type;
  _Control_Level_type Control_Level;

   typedef uint8_t _Move_mode_type;
  _Move_mode_type Move_mode;

   typedef boost::array<float, 3>  _position_ref_type;
  _position_ref_type position_ref;

   typedef boost::array<float, 3>  _velocity_ref_type;
  _velocity_ref_type velocity_ref;

   typedef boost::array<float, 3>  _acceleration_ref_type;
  _acceleration_ref_type acceleration_ref;

   typedef float _yaw_ref_type;
  _yaw_ref_type yaw_ref;

   typedef float _rtl_height_type;
  _rtl_height_type rtl_height;

   typedef float _land_speed_type;
  _land_speed_type land_speed;

   typedef uint8_t _Yaw_Rate_Mode_type;
  _Yaw_Rate_Mode_type Yaw_Rate_Mode;

   typedef float _yaw_rate_ref_type;
  _yaw_rate_ref_type yaw_rate_ref;

   typedef boost::array<float, 4>  _att_ref_type;
  _att_ref_type att_ref;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef uint32_t _Command_ID_type;
  _Command_ID_type Command_ID;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(Takeoff)
  #undef Takeoff
#endif
#if defined(_WIN32) && defined(Land)
  #undef Land
#endif
#if defined(_WIN32) && defined(RTL)
  #undef RTL
#endif
#if defined(_WIN32) && defined(Move)
  #undef Move
#endif
#if defined(_WIN32) && defined(User_Mode)
  #undef User_Mode
#endif
#if defined(_WIN32) && defined(Init_Pos_Hover)
  #undef Init_Pos_Hover
#endif
#if defined(_WIN32) && defined(Current_Pos_Hover)
  #undef Current_Pos_Hover
#endif
#if defined(_WIN32) && defined(Mission)
  #undef Mission
#endif
#if defined(_WIN32) && defined(aruco_land)
  #undef aruco_land
#endif
#if defined(_WIN32) && defined(DEFAULT_CONTROL)
  #undef DEFAULT_CONTROL
#endif
#if defined(_WIN32) && defined(ABSOLUTE_CONTROL)
  #undef ABSOLUTE_CONTROL
#endif
#if defined(_WIN32) && defined(EXIT_ABSOLUTE_CONTROL)
  #undef EXIT_ABSOLUTE_CONTROL
#endif
#if defined(_WIN32) && defined(XYZ_POS)
  #undef XYZ_POS
#endif
#if defined(_WIN32) && defined(XY_VEL_Z_POS)
  #undef XY_VEL_Z_POS
#endif
#if defined(_WIN32) && defined(XYZ_VEL)
  #undef XYZ_VEL
#endif
#if defined(_WIN32) && defined(XYZ_POS_BODY)
  #undef XYZ_POS_BODY
#endif
#if defined(_WIN32) && defined(XYZ_VEL_BODY)
  #undef XYZ_VEL_BODY
#endif
#if defined(_WIN32) && defined(XY_VEL_Z_POS_BODY)
  #undef XY_VEL_Z_POS_BODY
#endif
#if defined(_WIN32) && defined(TRAJECTORY)
  #undef TRAJECTORY
#endif
#if defined(_WIN32) && defined(XYZ_ATT)
  #undef XYZ_ATT
#endif
#if defined(_WIN32) && defined(LAT_LON_ALT)
  #undef LAT_LON_ALT
#endif

  enum {
    Takeoff = 1u,
    Land = 2u,
    RTL = 3u,
    Move = 4u,
    User_Mode = 5u,
    Init_Pos_Hover = 6u,
    Current_Pos_Hover = 7u,
    Mission = 8u,
    aruco_land = 9u,
    DEFAULT_CONTROL = 0u,
    ABSOLUTE_CONTROL = 1u,
    EXIT_ABSOLUTE_CONTROL = 2u,
    XYZ_POS = 0u,
    XY_VEL_Z_POS = 1u,
    XYZ_VEL = 2u,
    XYZ_POS_BODY = 3u,
    XYZ_VEL_BODY = 4u,
    XY_VEL_Z_POS_BODY = 5u,
    TRAJECTORY = 6u,
    XYZ_ATT = 7u,
    LAT_LON_ALT = 8u,
  };


  typedef boost::shared_ptr< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> const> ConstPtr;

}; // struct UAVCommand_

typedef ::uavcontrol_msgs::UAVCommand_<std::allocator<void> > UAVCommand;

typedef boost::shared_ptr< ::uavcontrol_msgs::UAVCommand > UAVCommandPtr;
typedef boost::shared_ptr< ::uavcontrol_msgs::UAVCommand const> UAVCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uavcontrol_msgs::UAVCommand_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::UAVCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Agent_CMD == rhs.Agent_CMD &&
    lhs.Control_Level == rhs.Control_Level &&
    lhs.Move_mode == rhs.Move_mode &&
    lhs.position_ref == rhs.position_ref &&
    lhs.velocity_ref == rhs.velocity_ref &&
    lhs.acceleration_ref == rhs.acceleration_ref &&
    lhs.yaw_ref == rhs.yaw_ref &&
    lhs.rtl_height == rhs.rtl_height &&
    lhs.land_speed == rhs.land_speed &&
    lhs.Yaw_Rate_Mode == rhs.Yaw_Rate_Mode &&
    lhs.yaw_rate_ref == rhs.yaw_rate_ref &&
    lhs.att_ref == rhs.att_ref &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.Command_ID == rhs.Command_ID;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uavcontrol_msgs::UAVCommand_<ContainerAllocator1> & lhs, const ::uavcontrol_msgs::UAVCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uavcontrol_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd7212149442985f53521ffb85dcaa16";
  }

  static const char* value(const ::uavcontrol_msgs::UAVCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd7212149442985fULL;
  static const uint64_t static_value2 = 0x53521ffb85dcaa16ULL;
};

template<class ContainerAllocator>
struct DataType< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uavcontrol_msgs/UAVCommand";
  }

  static const char* value(const ::uavcontrol_msgs::UAVCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## ---------------------------------控制命令的模式 ------------------------------\n"
"uint8 Agent_CMD\n"
"uint8 Takeoff=1           #起飞\n"
"uint8 Land=2              #降落\n"
"uint8 RTL=3               #返航\n"
"uint8 Move=4              #移动\n"
"uint8 User_Mode=5         #模式\n"
"uint8 Init_Pos_Hover=6    # home点上方悬停\n"
"uint8 Current_Pos_Hover=7 # 当前位置上方悬停\n"
"uint8 Mission=8           #自主巡航\n"
"uint8 aruco_land=9        #二维码识别降落\n"
"\n"
"\n"
"## ---------------------------------------控制等级 -------------------------------\n"
"uint8 Control_Level\n"
"uint8 DEFAULT_CONTROL=0        ### 默认控制\n"
"uint8 ABSOLUTE_CONTROL=1       ### 绝对控制，持续的Move模式应谨慎使用该优先级\n"
"uint8 EXIT_ABSOLUTE_CONTROL=2  ### 退出绝对控制控制，在该控制下，会响应上述两种控制的指令\n"
"\n"
"## 移动命令下的子模式\n"
"uint8 Move_mode\n"
"uint8 XYZ_POS = 0               ### 惯性系定点控制\n"
"uint8 XY_VEL_Z_POS = 1          ### 惯性系定高速度控制\n"
"uint8 XYZ_VEL = 2               ### 惯性系速度控制\n"
"uint8 XYZ_POS_BODY = 3          ### 机体系位置控制\n"
"uint8 XYZ_VEL_BODY = 4          ### 机体系速度控制\n"
"uint8 XY_VEL_Z_POS_BODY = 5     ### 机体系定高速度控制\n"
"uint8 TRAJECTORY = 6            ### 轨迹追踪控制\n"
"uint8 XYZ_ATT = 7               ### 姿态控制（来自外部控制器）\n"
"uint8 LAT_LON_ALT = 8           ### 绝对坐标系下的经纬度\n"
"\n"
"## 控制参考量\n"
"float32[3] position_ref                ## [m]\n"
"float32[3] velocity_ref                ## [m/s]\n"
"float32[3] acceleration_ref            ## [m/s^2]\n"
"float32 yaw_ref                        ## [rad]\n"
"float32 rtl_height                     ## [m]返航高度\n"
"float32 land_speed\n"
"bool Yaw_Rate_Mode                     ## True 代表控制偏航角速率\n"
"float32 yaw_rate_ref                   ## [rad/s]\n"
"float32[4] att_ref                     ## [rad] + [0-1]\n"
"float64 latitude                       ## 无人机经度、纬度、高度                 \n"
"float64 longitude                      ## 无人机经度、纬度、高度\n"
"float64 altitude                       ## 无人机经度、纬度、高度\n"
"\n"
"## 控制命令的编号 防止接收到错误命令， 编号应该逐次递加\n"
"uint32 Command_ID\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::uavcontrol_msgs::UAVCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Agent_CMD);
      stream.next(m.Control_Level);
      stream.next(m.Move_mode);
      stream.next(m.position_ref);
      stream.next(m.velocity_ref);
      stream.next(m.acceleration_ref);
      stream.next(m.yaw_ref);
      stream.next(m.rtl_height);
      stream.next(m.land_speed);
      stream.next(m.Yaw_Rate_Mode);
      stream.next(m.yaw_rate_ref);
      stream.next(m.att_ref);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.Command_ID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UAVCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uavcontrol_msgs::UAVCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uavcontrol_msgs::UAVCommand_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Agent_CMD: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Agent_CMD);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Control_Level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Control_Level);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Move_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Move_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "position_ref: ";
    if (v.position_ref.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.position_ref.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.position_ref[i]);
    }
    if (v.position_ref.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "velocity_ref: ";
    if (v.velocity_ref.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.velocity_ref.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.velocity_ref[i]);
    }
    if (v.velocity_ref.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "acceleration_ref: ";
    if (v.acceleration_ref.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.acceleration_ref.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.acceleration_ref[i]);
    }
    if (v.acceleration_ref.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaw_ref: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_ref);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rtl_height: ";
    Printer<float>::stream(s, indent + "  ", v.rtl_height);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "land_speed: ";
    Printer<float>::stream(s, indent + "  ", v.land_speed);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Yaw_Rate_Mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Yaw_Rate_Mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaw_rate_ref: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate_ref);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "att_ref: ";
    if (v.att_ref.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.att_ref.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.att_ref[i]);
    }
    if (v.att_ref.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Command_ID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Command_ID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAVCONTROL_MSGS_MESSAGE_UAVCOMMAND_H
