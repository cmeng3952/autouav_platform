# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uavcontrol_msgs/GimbalState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GimbalState(genpy.Message):
  _md5sum = "17d9d9f817a22490d422f0f90e0623a4"
  _type = "uavcontrol_msgs/GimbalState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

# gimbal type; value = {SV::GimbalType};0:G1;1:Q10F;2:AT10;3:GX40;4:SU17
uint8 type
# gimbal movement mode; 0:None; 1:lock head; 2ï¼šunlock head; 3: tracking;
uint8 moveMode
# gimbal image type; 0:normal; 1:infrared; 2:merge;
uint8 imageMode
# gimbal zoom
bool isZoom
# gimbal rec; 0:none; 1:gimbal rec; 2:local rec; 3:gimbal & local rec;
uint8 isRec
# gimbal fov, XY
float32[2] fov
# gimbal real time angle, RPY <deg>
float32[3] angleRT
# gimbal real time angle rate, RPY <deg/s> <if gimbal supported>
float32[3] angleRTRate
# gimbal setted max angle rate <deg/s> <if gimbal supported>
float32[3] angleRateSet

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','type','moveMode','imageMode','isZoom','isRec','fov','angleRT','angleRTRate','angleRateSet']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','bool','uint8','float32[2]','float32[3]','float32[3]','float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,type,moveMode,imageMode,isZoom,isRec,fov,angleRT,angleRTRate,angleRateSet

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GimbalState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.type is None:
        self.type = 0
      if self.moveMode is None:
        self.moveMode = 0
      if self.imageMode is None:
        self.imageMode = 0
      if self.isZoom is None:
        self.isZoom = False
      if self.isRec is None:
        self.isRec = 0
      if self.fov is None:
        self.fov = [0.] * 2
      if self.angleRT is None:
        self.angleRT = [0.] * 3
      if self.angleRTRate is None:
        self.angleRTRate = [0.] * 3
      if self.angleRateSet is None:
        self.angleRateSet = [0.] * 3
    else:
      self.header = std_msgs.msg.Header()
      self.type = 0
      self.moveMode = 0
      self.imageMode = 0
      self.isZoom = False
      self.isRec = 0
      self.fov = [0.] * 2
      self.angleRT = [0.] * 3
      self.angleRTRate = [0.] * 3
      self.angleRateSet = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.type, _x.moveMode, _x.imageMode, _x.isZoom, _x.isRec))
      buff.write(_get_struct_2f().pack(*self.fov))
      buff.write(_get_struct_3f().pack(*self.angleRT))
      buff.write(_get_struct_3f().pack(*self.angleRTRate))
      buff.write(_get_struct_3f().pack(*self.angleRateSet))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.type, _x.moveMode, _x.imageMode, _x.isZoom, _x.isRec,) = _get_struct_5B().unpack(str[start:end])
      self.isZoom = bool(self.isZoom)
      start = end
      end += 8
      self.fov = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 12
      self.angleRT = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.angleRTRate = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.angleRateSet = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.type, _x.moveMode, _x.imageMode, _x.isZoom, _x.isRec))
      buff.write(self.fov.tostring())
      buff.write(self.angleRT.tostring())
      buff.write(self.angleRTRate.tostring())
      buff.write(self.angleRateSet.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.type, _x.moveMode, _x.imageMode, _x.isZoom, _x.isRec,) = _get_struct_5B().unpack(str[start:end])
      self.isZoom = bool(self.isZoom)
      start = end
      end += 8
      self.fov = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 12
      self.angleRT = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.angleRTRate = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.angleRateSet = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
