# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uavcontrol_msgs/VisionDiff.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VisionDiff(genpy.Message):
  _md5sum = "42ea811a55788f015447302191910a5c"
  _type = "uavcontrol_msgs/VisionDiff"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 Id
uint8 detect

uint16 objectX # 左上角
uint16 objectY # 左上角
uint16 objectWidth
uint16 objectHeight

uint16 frameWidth
uint16 frameHeight

# Gimbal 跟踪pid
float32 kp
float32 ki
float32 kd

int8 ctlMode # 0: yaw+pitch, 1: roll+pitch 3:混合(未实现)
int8 yawPitch = 0
int8 rollPitch = 1
int8 mix=3

# 用于自动缩放
float32 currSize    #框选近大远小
float32 maxSize
float32 minSize #框选大小

float32 trackIgnoreError
bool autoZoom"""
  # Pseudo-constants
  yawPitch = 0
  rollPitch = 1
  mix = 3

  __slots__ = ['Id','detect','objectX','objectY','objectWidth','objectHeight','frameWidth','frameHeight','kp','ki','kd','ctlMode','currSize','maxSize','minSize','trackIgnoreError','autoZoom']
  _slot_types = ['uint8','uint8','uint16','uint16','uint16','uint16','uint16','uint16','float32','float32','float32','int8','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Id,detect,objectX,objectY,objectWidth,objectHeight,frameWidth,frameHeight,kp,ki,kd,ctlMode,currSize,maxSize,minSize,trackIgnoreError,autoZoom

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VisionDiff, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Id is None:
        self.Id = 0
      if self.detect is None:
        self.detect = 0
      if self.objectX is None:
        self.objectX = 0
      if self.objectY is None:
        self.objectY = 0
      if self.objectWidth is None:
        self.objectWidth = 0
      if self.objectHeight is None:
        self.objectHeight = 0
      if self.frameWidth is None:
        self.frameWidth = 0
      if self.frameHeight is None:
        self.frameHeight = 0
      if self.kp is None:
        self.kp = 0.
      if self.ki is None:
        self.ki = 0.
      if self.kd is None:
        self.kd = 0.
      if self.ctlMode is None:
        self.ctlMode = 0
      if self.currSize is None:
        self.currSize = 0.
      if self.maxSize is None:
        self.maxSize = 0.
      if self.minSize is None:
        self.minSize = 0.
      if self.trackIgnoreError is None:
        self.trackIgnoreError = 0.
      if self.autoZoom is None:
        self.autoZoom = False
    else:
      self.Id = 0
      self.detect = 0
      self.objectX = 0
      self.objectY = 0
      self.objectWidth = 0
      self.objectHeight = 0
      self.frameWidth = 0
      self.frameHeight = 0
      self.kp = 0.
      self.ki = 0.
      self.kd = 0.
      self.ctlMode = 0
      self.currSize = 0.
      self.maxSize = 0.
      self.minSize = 0.
      self.trackIgnoreError = 0.
      self.autoZoom = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B6H3fb4fB().pack(_x.Id, _x.detect, _x.objectX, _x.objectY, _x.objectWidth, _x.objectHeight, _x.frameWidth, _x.frameHeight, _x.kp, _x.ki, _x.kd, _x.ctlMode, _x.currSize, _x.maxSize, _x.minSize, _x.trackIgnoreError, _x.autoZoom))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.Id, _x.detect, _x.objectX, _x.objectY, _x.objectWidth, _x.objectHeight, _x.frameWidth, _x.frameHeight, _x.kp, _x.ki, _x.kd, _x.ctlMode, _x.currSize, _x.maxSize, _x.minSize, _x.trackIgnoreError, _x.autoZoom,) = _get_struct_2B6H3fb4fB().unpack(str[start:end])
      self.autoZoom = bool(self.autoZoom)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B6H3fb4fB().pack(_x.Id, _x.detect, _x.objectX, _x.objectY, _x.objectWidth, _x.objectHeight, _x.frameWidth, _x.frameHeight, _x.kp, _x.ki, _x.kd, _x.ctlMode, _x.currSize, _x.maxSize, _x.minSize, _x.trackIgnoreError, _x.autoZoom))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.Id, _x.detect, _x.objectX, _x.objectY, _x.objectWidth, _x.objectHeight, _x.frameWidth, _x.frameHeight, _x.kp, _x.ki, _x.kd, _x.ctlMode, _x.currSize, _x.maxSize, _x.minSize, _x.trackIgnoreError, _x.autoZoom,) = _get_struct_2B6H3fb4fB().unpack(str[start:end])
      self.autoZoom = bool(self.autoZoom)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B6H3fb4fB = None
def _get_struct_2B6H3fb4fB():
    global _struct_2B6H3fb4fB
    if _struct_2B6H3fb4fB is None:
        _struct_2B6H3fb4fB = struct.Struct("<2B6H3fb4fB")
    return _struct_2B6H3fb4fB
